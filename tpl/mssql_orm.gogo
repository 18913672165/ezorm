{{define "mssql_orm"}}package {{.Package}}
{{$obj := .}}

import (
	"database/sql"
	"fmt"
	"strings"
	{{range .GetOrmImports}}
	"{{.}}"
	{{end}}

	"github.com/ezbuy/ezorm/db"
)

var idFieldName = "Id"

func (m *_{{.Name}}Mgr) Save(obj *{{.Name}}) (sql.Result, error) {
	if obj.Id == 0 {
		return m.saveInsert(obj)
	}
	return m.saveUpdate(obj)
}

func (m *_{{.Name}}Mgr) saveInsert(obj *{{.Name}}) (sql.Result, error) {
	query := "insert into dbo.[people] (
	{{- range $index, $field := .Fields}}
		{{- if ne $field.Name "Id"}}
			{{- if $index}}, {{end}}{{$field.Tag}}
		{{- end -}}
	{{- end -}}
	) values (
	{{- range $index, $field := .Fields}}
		{{- if ne $field.Name "Id"}}
			{{- if $index}}, {{end}}?
		{{- end -}}
	{{- end -}}
	)"
	server := db.GetSqlServer()
	result, err := server.Exec(query,
	{{- range $index, $field := .Fields}}
		{{- if ne $field.Name "Id"}}
			{{- if $index}}, {{- end -}}obj.{{$field.Name -}}
		{{- end -}}
	{{- end -}})
	if err != nil {
		return result, err
	}

	lastInsertId, err := result.LastInsertId()
	if err != nil {
		return result, err
	}

	obj.Id = int32(lastInsertId)

	return result, err
}

func (m *_{{.Name}}Mgr) saveUpdate(obj *{{.Name}}) (sql.Result, error) {
	query := "update dbo.[People] set
	{{- range $index, $field := .Fields}}
		{{- if ne $field.Name "Id"}}{{if $index}},{{end}} {{$field.Tag}}=?{{end -}}
	{{- end }} where
	{{- range $index, $field := .Fields}}
		{{- if eq $field.Name "Id"}} {{$field.Tag}}=?{{end}}
	{{- end -}}"
	server := db.GetSqlServer()
	return server.Exec(query,
	{{- range $field := .Fields}}
		{{- if ne $field.Name "Id"}}obj.{{$field.Name}}, {{end}}
	{{- end -}}
	obj.Id)
}

func (m *_{{.Name}}Mgr) FindOne(where string, args ...interface{}) (*{{.Name}}, error) {
	query := getQuerysql(true, where)
	server := db.GetSqlServer()
	var obj {{.Name}}
	err := server.Query(&obj, query, args...)
	return &obj, err
}


func (m *_{{.Name}}Mgr) Find(where string, args ...interface{}) (results []*{{.Name}}, err error) {
	query := getQuerysql(false, where)
	server := db.GetSqlServer()
	err = server.Query(&results, query, args...)
	return
}

func (m *_{{.Name}}Mgr) FindAll() (results []*{{.Name}}, err error) {
	return m.Find("")
}

func (m *_{{.Name}}Mgr) FindWithOffset(where string, offset int, limit int, args ...interface{}) (results []*{{.Name}}, err error) {
	query := getQuerysql(false, where)

	if !strings.Contains(strings.ToLower(where), "ORDER BY") {
		where = " ORDER BY Name"
	}
	query = query + where + " OFFSET ? Rows FETCH NEXT ? Rows ONLY"
	args = append(args, offset)
	args = append(args, limit)

	server := db.GetSqlServer()
	err = server.Query(&results, query, args...)
	return
}


func getQuerysql(topOne bool, where string) string {
	query := `SELECT `
	if topOne {
		query = query + ` TOP 1 `
	}
	query = query + ` * FROM dbo.[{{.Name}}] WITH(NOLOCK) `

	if where != "" {
		if strings.Index(strings.Trim(where, " "), "WHERE") == -1 {
			where = " WHERE " + where
		}
		query = query + where
	}
	return query
}

func (m *_{{.Name}}Mgr) Del(where string, params ...interface{}) (sql.Result, error) {
	query := "delete from {{.Name}}"
	if where != "" {
		query = fmt.Sprintf("delete from {{.Name}} where " + where)
	}
	server := db.GetSqlServer()
	return server.Exec(query, params...)
}

// argument example:
// set:"a=?, b=?"
// where:"c=? and d=?"
// params:[]interface{}{"a", "b", "c", "d"}...
func (m *_{{.Name}}Mgr) Update(set, where string, params ...interface{}) (sql.Result, error) {
	query := fmt.Sprintf("update {{.Name}} set %s", set)
	if where != "" {
		query = fmt.Sprintf("update {{.Name}} set %s where %s", set, where)
	}
	server := db.GetSqlServer()
	return server.Exec(query, params...)
}

{{end}}
