{{define "mongo_mongo"}}

//mongo methods
var (
	insertCB_{{.Name}} []func(obj IXuanWuObj)
	updateCB_{{.Name}} []func(obj IXuanWuObj)
	extraValidation_{{.Name}} []func(o *{{.Name}}) bool
)

func {{.Name}}AddInsertCallback(cb func(obj IXuanWuObj)) {
	insertCB_{{.Name}} = append(insertCB_{{.Name}}, cb)
}

func {{.Name}}AddUpdateCallback(cb func(obj IXuanWuObj)) {
	updateCB_{{.Name}} = append(updateCB_{{.Name}}, cb)
}

func {{.Name}}AddExtraValidation(validate func(o *{{.Name}}) bool) {
	extraValidation_{{.Name}} = append(extraValidation_{{.Name}}, validate)
}

func (o *{{.Name}}) Save() (info *mgo.ChangeInfo, err error) {
	session, col := {{.Name}}Col()
	defer session.Close()

	isNew := o.isNew

	{{range $field := .Fields}}
	{{if and (ne $field.Name "ID") $field.HasMeta}}
	{{$field.Name}}_old_metas, _ := o.GetAll{{$field.Meta}}()
	{{$field.Name}}_new_metas, _ := {{$field.Meta}}FindByIDs(o.{{$field.Name}})
	for _, meta := range {{$field.Name}}_old_metas {
		{{$field.Meta}}RemoveByID(meta.ID.Hex())
	}
	for _, meta := range {{$field.Name}}_new_metas {
		meta.Save()
	}
	{{end}}
	{{end}}

	info, err = col.UpsertId(o.ID, o)
	o.isNew = false

	{{if .NeedSearch}}
	o.IndexSearch()
	{{end}}

	if isNew {
		{{.Name}}InsertCallback(o)
	} else {
		{{.Name}}UpdateCallback(o)
	}

	return
}

func (o *{{.Name}}) InsertUnique(query interface{}) (saved bool, err error) {
	session, col := {{.Name}}Col()
	defer session.Close()

	info, err := col.Upsert(query, db.M{"$setOnInsert": o})
	if err != nil {
		return
	}
	if info.Updated == 0 {
		saved = true
	}
	o.isNew = false
	if saved {
		{{.Name}}InsertCallback(o)
	}
	return
}

func {{.Name}}InsertCallback(o *{{.Name}}) {
	for _, cb := range insertCB_{{.Name}} {
		cb(o)
	}
}

func {{.Name}}UpdateCallback(o *{{.Name}}) {
	for _, cb := range updateCB_{{.Name}} {
		cb(o)
	}
}

func {{.Name}}Col() (session *mgo.Session, col *mgo.Collection) {
	return db.GetCol("{{.Package}}.{{.Name}}")
}
{{end}}
